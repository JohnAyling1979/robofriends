{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","components_Card","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initalStateSearch","initalStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4e5107ac.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({name, email}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${name}?200x200`} alt='Robot' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ( {robots} ) => {\n\n\treturn (\n\t\t<div>\n\t\t\t{robots.map( robot => \n\t\t\t\t<Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)}\n\t\t</div>\n\t)\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search'\n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '450px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots()\n\t}\n\n\trender() {\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props\n\t\tconst filterRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\n\t\treturn isPending ?\n\t\t\t<h1 className='tc'>Loading...</h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filterRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\t\t\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,payload:error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initalStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initalStateSearch, action={}) => {\n\tswitch(action.type)\n\t{\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({},state, {searchField: action.payload})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst initalStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initalStateRobots, action={}) => {\n\tswitch(action.type)\n\t{\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.action({}.state, {error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers} from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>\n\t, document.getElementById('root')\n)\nregisterServiceWorker()"],"sourceRoot":""}