{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","components_Card","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initalStateSearch","initalStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4cdcc260.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({name, email}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${name}?200x200`} alt='Robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ( {robots} ) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map( robot => \r\n\t\t\t\t<Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '450px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css'\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props\r\n\t\tconst filterRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className='tc'>Loading...</h1> :\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t)\t\t\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nconst initalStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initalStateSearch, action={}) => {\r\n\tswitch(action.type)\r\n\t{\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst initalStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initalStateRobots, action={}) => {\r\n\tswitch(action.type)\r\n\t{\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.action({}.state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers} from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {searchRobots, requestRobots} from './reducers'\r\nimport 'tachyons'\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>\r\n\t, document.getElementById('root')\r\n)\r\nregisterServiceWorker()"],"sourceRoot":""}